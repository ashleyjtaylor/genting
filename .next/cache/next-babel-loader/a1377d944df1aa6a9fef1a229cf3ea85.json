{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React from 'react';\nimport fetch from 'isomorphic-unfetch';\nimport PlanetInfo from '../../components/PlanetInfo/PlanetInfo';\nimport FilmsList from '../../components/FilmsList/FilmsList';\nimport * as GS from '../globalStyles';\n\nconst PlanetPage = ({\n  data\n}) => {\n  const {\n    Films\n  } = data,\n        props = _objectWithoutProperties(data, [\"Films\"]);\n\n  return __jsx(GS.Main, null, __jsx(GS.Wrap, null, __jsx(PlanetInfo, props), __jsx(FilmsList, {\n    films: Films\n  })));\n};\n\nPlanetPage.getInitialProps = async ({\n  res,\n  query\n}) => {\n  try {\n    const response = await fetch(`http://localhost:3000/api/planets/${query.stub}`);\n    const data = await response.json();\n\n    if (Object.entries(data).length === 0) {\n      if (res) res.statusCode = 404;\n      return {\n        statusCode: 404\n      };\n    }\n\n    if (res) res.statusCode = 200;\n    return {\n      data\n    };\n  } catch (err) {\n    if (res) res.statusCode = 500;\n    return {\n      err,\n      statusCode: 500,\n      message: 'Server error'\n    };\n  }\n};\n\nexport default PlanetPage;","map":{"version":3,"sources":["/Users/ashleytaylor/Documents/genting/pages/planets/[stub].jsx"],"names":["React","fetch","PlanetInfo","FilmsList","GS","PlanetPage","data","Films","props","getInitialProps","res","query","response","stub","json","Object","entries","length","statusCode","err","message"],"mappings":";;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,KAAP,MAAkB,oBAAlB;AAEA,OAAOC,UAAP,MAAuB,wCAAvB;AACA,OAAOC,SAAP,MAAsB,sCAAtB;AAEA,OAAO,KAAKC,EAAZ,MAAoB,iBAApB;;AAEA,MAAMC,UAAU,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAc;AAC/B,QAAM;AAAEC,IAAAA;AAAF,MAAsBD,IAA5B;AAAA,QAAkBE,KAAlB,4BAA4BF,IAA5B;;AAEA,SACE,MAAC,EAAD,CAAI,IAAJ,QACE,MAAC,EAAD,CAAI,IAAJ,QACE,MAAC,UAAD,EAAgBE,KAAhB,CADF,EAEE,MAAC,SAAD;AAAW,IAAA,KAAK,EAAED;AAAlB,IAFF,CADF,CADF;AAQD,CAXD;;AAaAF,UAAU,CAACI,eAAX,GAA6B,OAAO;AAAEC,EAAAA,GAAF;AAAOC,EAAAA;AAAP,CAAP,KAA0B;AACrD,MAAI;AACF,UAAMC,QAAQ,GAAG,MAAMX,KAAK,CAAE,qCAAoCU,KAAK,CAACE,IAAK,EAAjD,CAA5B;AACA,UAAMP,IAAI,GAAG,MAAMM,QAAQ,CAACE,IAAT,EAAnB;;AAEA,QAAIC,MAAM,CAACC,OAAP,CAAeV,IAAf,EAAqBW,MAArB,KAAgC,CAApC,EAAuC;AACrC,UAAIP,GAAJ,EAASA,GAAG,CAACQ,UAAJ,GAAiB,GAAjB;AACT,aAAO;AAAEA,QAAAA,UAAU,EAAE;AAAd,OAAP;AACD;;AAED,QAAIR,GAAJ,EAASA,GAAG,CAACQ,UAAJ,GAAiB,GAAjB;AAET,WAAO;AAAEZ,MAAAA;AAAF,KAAP;AACD,GAZD,CAYE,OAAOa,GAAP,EAAY;AACZ,QAAIT,GAAJ,EAASA,GAAG,CAACQ,UAAJ,GAAiB,GAAjB;AAET,WAAO;AACLC,MAAAA,GADK;AAELD,MAAAA,UAAU,EAAE,GAFP;AAGLE,MAAAA,OAAO,EAAE;AAHJ,KAAP;AAKD;AACF,CAtBD;;AAwBA,eAAef,UAAf","sourcesContent":["import React from 'react';\nimport fetch from 'isomorphic-unfetch';\n\nimport PlanetInfo from '../../components/PlanetInfo/PlanetInfo';\nimport FilmsList from '../../components/FilmsList/FilmsList';\n\nimport * as GS from '../globalStyles';\n\nconst PlanetPage = ({ data }) => {\n  const { Films, ...props } = data;\n\n  return (\n    <GS.Main>\n      <GS.Wrap>\n        <PlanetInfo {...props } />\n        <FilmsList films={Films} />\n      </GS.Wrap>\n    </GS.Main>\n  );\n}\n\nPlanetPage.getInitialProps = async ({ res, query }) => {\n  try {\n    const response = await fetch(`http://localhost:3000/api/planets/${query.stub}`);\n    const data = await response.json();\n\n    if (Object.entries(data).length === 0) {\n      if (res) res.statusCode = 404;\n      return { statusCode: 404 };\n    }\n\n    if (res) res.statusCode = 200;\n\n    return { data };\n  } catch (err) {\n    if (res) res.statusCode = 500;\n\n    return {\n      err,\n      statusCode: 500,\n      message: 'Server error'\n    }\n  }\n};\n\nexport default PlanetPage;\n"]},"metadata":{},"sourceType":"module"}