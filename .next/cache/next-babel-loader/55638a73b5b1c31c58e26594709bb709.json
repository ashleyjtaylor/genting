{"ast":null,"code":"import moment from 'moment';\nimport fetch from 'isomorphic-unfetch';\nimport { formatStub, formatFilm } from '../../../lib/responseFormat';\nconst stubs = [{\n  id: 1,\n  planet: 'tatooine'\n}, {\n  id: 2,\n  planet: 'alderaan'\n}, {\n  id: 3,\n  planet: 'yavin'\n}];\n\nconst fetchFilms = async films => {\n  const data = await Promise.all(films.map(async url => {\n    const response = await fetch(url);\n    const film = await response.json();\n    return formatFilm(film);\n  }));\n  return data.sort((a, b) => moment(b.ReleaseDate).diff(a.ReleaseDate, 'days'));\n};\n\nexport default (async (req, res) => {\n  const stub = stubs.find(stub => stub.planet === req.query.stub);\n\n  if (!stub) {\n    return res.status(404).json({\n      message: 'Invalid planet'\n    });\n  }\n\n  try {\n    const response = await fetch(`https://swapi.co/api/planets/${stub.id}`);\n    const data = await response.json();\n    data.films = await fetchFilms(data.films);\n    return res.status(200).json(formatStub(data));\n  } catch (err) {\n    console.log('Error: /planets/:stub', err);\n    return res.status(400).json({\n      message: 'Error fetching planets',\n      err\n    });\n  }\n});","map":{"version":3,"sources":["/Users/ashleytaylor/Documents/genting/pages/api/planets/[stub].js"],"names":["moment","fetch","formatStub","formatFilm","stubs","id","planet","fetchFilms","films","data","Promise","all","map","url","response","film","json","sort","a","b","ReleaseDate","diff","req","res","stub","find","query","status","message","err","console","log"],"mappings":"AAAA,OAAOA,MAAP,MAAmB,QAAnB;AACA,OAAOC,KAAP,MAAkB,oBAAlB;AACA,SAASC,UAAT,EAAqBC,UAArB,QAAuC,6BAAvC;AAEA,MAAMC,KAAK,GAAG,CACZ;AAAEC,EAAAA,EAAE,EAAE,CAAN;AAASC,EAAAA,MAAM,EAAE;AAAjB,CADY,EAEZ;AAAED,EAAAA,EAAE,EAAE,CAAN;AAASC,EAAAA,MAAM,EAAE;AAAjB,CAFY,EAGZ;AAAED,EAAAA,EAAE,EAAE,CAAN;AAASC,EAAAA,MAAM,EAAE;AAAjB,CAHY,CAAd;;AAMA,MAAMC,UAAU,GAAG,MAAOC,KAAP,IAAiB;AAClC,QAAMC,IAAI,GAAG,MAAMC,OAAO,CAACC,GAAR,CACjBH,KAAK,CAACI,GAAN,CAAU,MAAMC,GAAN,IAAa;AACrB,UAAMC,QAAQ,GAAG,MAAMb,KAAK,CAACY,GAAD,CAA5B;AACA,UAAME,IAAI,GAAG,MAAMD,QAAQ,CAACE,IAAT,EAAnB;AAEA,WAAOb,UAAU,CAACY,IAAD,CAAjB;AACD,GALD,CADiB,CAAnB;AASA,SAAON,IAAI,CAACQ,IAAL,CAAU,CAACC,CAAD,EAAIC,CAAJ,KAAUnB,MAAM,CAACmB,CAAC,CAACC,WAAH,CAAN,CAAsBC,IAAtB,CAA2BH,CAAC,CAACE,WAA7B,EAA0C,MAA1C,CAApB,CAAP;AACD,CAXD;;AAaA,gBAAe,OAAOE,GAAP,EAAYC,GAAZ,KAAoB;AACjC,QAAMC,IAAI,GAAGpB,KAAK,CAACqB,IAAN,CAAWD,IAAI,IAAIA,IAAI,CAAClB,MAAL,KAAgBgB,GAAG,CAACI,KAAJ,CAAUF,IAA7C,CAAb;;AAEA,MAAI,CAACA,IAAL,EAAW;AACT,WAAOD,GAAG,CAACI,MAAJ,CAAW,GAAX,EAAgBX,IAAhB,CAAqB;AAAEY,MAAAA,OAAO,EAAE;AAAX,KAArB,CAAP;AACD;;AAED,MAAI;AACF,UAAMd,QAAQ,GAAG,MAAMb,KAAK,CAAE,gCAA+BuB,IAAI,CAACnB,EAAG,EAAzC,CAA5B;AACA,UAAMI,IAAI,GAAG,MAAMK,QAAQ,CAACE,IAAT,EAAnB;AAEAP,IAAAA,IAAI,CAACD,KAAL,GAAa,MAAMD,UAAU,CAACE,IAAI,CAACD,KAAN,CAA7B;AAEA,WAAOe,GAAG,CAACI,MAAJ,CAAW,GAAX,EAAgBX,IAAhB,CAAqBd,UAAU,CAACO,IAAD,CAA/B,CAAP;AACD,GAPD,CAOE,OAAOoB,GAAP,EAAY;AACZC,IAAAA,OAAO,CAACC,GAAR,CAAY,uBAAZ,EAAqCF,GAArC;AACA,WAAON,GAAG,CAACI,MAAJ,CAAW,GAAX,EAAgBX,IAAhB,CAAqB;AAAEY,MAAAA,OAAO,EAAE,wBAAX;AAAqCC,MAAAA;AAArC,KAArB,CAAP;AACD;AACF,CAlBD","sourcesContent":["import moment from 'moment';\nimport fetch from 'isomorphic-unfetch';\nimport { formatStub, formatFilm } from '../../../lib/responseFormat';\n\nconst stubs = [\n  { id: 1, planet: 'tatooine' },\n  { id: 2, planet: 'alderaan' },\n  { id: 3, planet: 'yavin' }\n];\n\nconst fetchFilms = async (films) => {\n  const data = await Promise.all(\n    films.map(async url => {\n      const response = await fetch(url);\n      const film = await response.json();\n\n      return formatFilm(film);\n    })\n  );\n\n  return data.sort((a, b) => moment(b.ReleaseDate).diff(a.ReleaseDate, 'days'));\n};\n\nexport default async (req, res) => {\n  const stub = stubs.find(stub => stub.planet === req.query.stub);\n\n  if (!stub) {\n    return res.status(404).json({ message: 'Invalid planet' });\n  }\n\n  try {\n    const response = await fetch(`https://swapi.co/api/planets/${stub.id}`);\n    const data = await response.json();\n  \n    data.films = await fetchFilms(data.films);\n\n    return res.status(200).json(formatStub(data));\n  } catch (err) {\n    console.log('Error: /planets/:stub', err);\n    return res.status(400).json({ message: 'Error fetching planets', err });\n  }\n};\n"]},"metadata":{},"sourceType":"module"}