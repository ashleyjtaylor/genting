{"ast":null,"code":"import _Promise from \"@babel/runtime-corejs2/core-js/promise\";\nimport _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _Object$entries from \"@babel/runtime-corejs2/core-js/object/entries\";\nimport _objectWithoutProperties from \"@babel/runtime-corejs2/helpers/esm/objectWithoutProperties\";\nvar __jsx = React.createElement;\nimport React from 'react';\nimport fetch from 'isomorphic-unfetch';\nimport PlanetInfo from '../../components/PlanetInfo/PlanetInfo';\nimport FilmsList from '../../components/FilmsList/FilmsList';\n\nvar PlanetPage = function PlanetPage(_ref) {\n  var data = _ref.data;\n\n  var Films = data.Films,\n      props = _objectWithoutProperties(data, [\"Films\"]);\n\n  return __jsx(React.Fragment, null, __jsx(PlanetInfo, props), __jsx(FilmsList, {\n    films: Films\n  }));\n};\n\nPlanetPage.getInitialProps = function _callee(_ref2) {\n  var res, query, response, data;\n  return _regeneratorRuntime.async(function _callee$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          res = _ref2.res, query = _ref2.query;\n          _context.prev = 1;\n          _context.next = 4;\n          return _regeneratorRuntime.awrap(fetch(\"http://localhost:3000/api/planets/\".concat(query.stub)));\n\n        case 4:\n          response = _context.sent;\n          _context.next = 7;\n          return _regeneratorRuntime.awrap(response.json());\n\n        case 7:\n          data = _context.sent;\n\n          if (!(_Object$entries(data).length === 0)) {\n            _context.next = 11;\n            break;\n          }\n\n          if (res) res.statusCode = 404;\n          return _context.abrupt(\"return\", {\n            statusCode: 404\n          });\n\n        case 11:\n          if (res) res.statusCode = 200;\n          return _context.abrupt(\"return\", {\n            data: data\n          });\n\n        case 15:\n          _context.prev = 15;\n          _context.t0 = _context[\"catch\"](1);\n          if (res) res.statusCode = 500;\n          return _context.abrupt(\"return\", {\n            err: _context.t0,\n            statusCode: 500,\n            message: 'Server error'\n          });\n\n        case 19:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, [[1, 15]], _Promise);\n};\n\nexport default PlanetPage;","map":{"version":3,"sources":["/Users/ashleytaylor/Documents/genting/pages/planets/[stub].jsx"],"names":["React","fetch","PlanetInfo","FilmsList","PlanetPage","data","Films","props","getInitialProps","res","query","stub","response","json","length","statusCode","err","message"],"mappings":";;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,KAAP,MAAkB,oBAAlB;AAEA,OAAOC,UAAP,MAAuB,wCAAvB;AACA,OAAOC,SAAP,MAAsB,sCAAtB;;AAEA,IAAMC,UAAU,GAAG,SAAbA,UAAa,OAAc;AAAA,MAAXC,IAAW,QAAXA,IAAW;;AAAA,MACvBC,KADuB,GACHD,IADG,CACvBC,KADuB;AAAA,MACbC,KADa,4BACHF,IADG;;AAG/B,SACE,4BACE,MAAC,UAAD,EAAgBE,KAAhB,CADF,EAEE,MAAC,SAAD;AAAW,IAAA,KAAK,EAAED;AAAlB,IAFF,CADF;AAMD,CATD;;AAWAF,UAAU,CAACI,eAAX,GAA6B;AAAA;AAAA;AAAA;AAAA;AAAA;AAASC,UAAAA,GAAT,SAASA,GAAT,EAAcC,KAAd,SAAcA,KAAd;AAAA;AAAA;AAAA,2CAEFT,KAAK,6CAAsCS,KAAK,CAACC,IAA5C,EAFH;;AAAA;AAEnBC,UAAAA,QAFmB;AAAA;AAAA,2CAGNA,QAAQ,CAACC,IAAT,EAHM;;AAAA;AAGnBR,UAAAA,IAHmB;;AAAA,gBAKrB,gBAAeA,IAAf,EAAqBS,MAArB,KAAgC,CALX;AAAA;AAAA;AAAA;;AAMvB,cAAIL,GAAJ,EAASA,GAAG,CAACM,UAAJ,GAAiB,GAAjB;AANc,2CAOhB;AAAEA,YAAAA,UAAU,EAAE;AAAd,WAPgB;;AAAA;AAUzB,cAAIN,GAAJ,EAASA,GAAG,CAACM,UAAJ,GAAiB,GAAjB;AAVgB,2CAYlB;AAAEV,YAAAA,IAAI,EAAJA;AAAF,WAZkB;;AAAA;AAAA;AAAA;AAczB,cAAII,GAAJ,EAASA,GAAG,CAACM,UAAJ,GAAiB,GAAjB;AAdgB,2CAgBlB;AACLC,YAAAA,GAAG,aADE;AAELD,YAAAA,UAAU,EAAE,GAFP;AAGLE,YAAAA,OAAO,EAAE;AAHJ,WAhBkB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAA7B;;AAwBA,eAAeb,UAAf","sourcesContent":["import React from 'react';\nimport fetch from 'isomorphic-unfetch';\n\nimport PlanetInfo from '../../components/PlanetInfo/PlanetInfo';\nimport FilmsList from '../../components/FilmsList/FilmsList';\n\nconst PlanetPage = ({ data }) => {\n  const { Films, ...props } = data;\n\n  return (\n    <>\n      <PlanetInfo {...props } />\n      <FilmsList films={Films} />\n    </>\n  );\n}\n\nPlanetPage.getInitialProps = async ({ res, query }) => {\n  try {\n    const response = await fetch(`http://localhost:3000/api/planets/${query.stub}`);\n    const data = await response.json();\n\n    if (Object.entries(data).length === 0) {\n      if (res) res.statusCode = 404;\n      return { statusCode: 404 };\n    }\n\n    if (res) res.statusCode = 200;\n\n    return { data };\n  } catch (err) {\n    if (res) res.statusCode = 500;\n\n    return {\n      err,\n      statusCode: 500,\n      message: 'Server error'\n    }\n  }\n};\n\nexport default PlanetPage;\n"]},"metadata":{},"sourceType":"module"}