{"ast":null,"code":"import fetch from 'isomorphic-unfetch';\nimport { formatStub } from '../../../lib/responseFormat';\nconst stubs = [{\n  id: 1,\n  planet: 'tatooine'\n}, {\n  id: 2,\n  planet: 'alderaan'\n}, {\n  id: 3,\n  planet: 'yavin'\n}];\n\nconst fetchFilms = async films => {\n  const promises = films.map(film => fetch(film));\n  const responses = await Promise.all(promises.map(async promise => await promise.json()));\n  console.log(responses);\n  return responses;\n};\n\nexport default (async (req, res) => {\n  const stub = stubs.find(stub => stub.planet === req.query.stub);\n\n  if (!stub) {\n    return res.status(404).json({\n      message: 'Invalid planet'\n    });\n  }\n\n  try {\n    const response = await fetch(`https://swapi.co/api/planets/${stub.id}`);\n    const data = await response.json();\n    data.films = await fetchFilms(data.films);\n    console.log(data);\n    return res.status(200).json(formatStub(data));\n  } catch (err) {\n    console.log('Error: /planets/:stub', err);\n    return res.status(400).json({\n      message: 'Error fetching planets',\n      err\n    });\n  }\n});","map":{"version":3,"sources":["/Users/ashleytaylor/Documents/genting/pages/api/planets/[stub].js"],"names":["fetch","formatStub","stubs","id","planet","fetchFilms","films","promises","map","film","responses","Promise","all","promise","json","console","log","req","res","stub","find","query","status","message","response","data","err"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,oBAAlB;AAEA,SAASC,UAAT,QAA2B,6BAA3B;AAEA,MAAMC,KAAK,GAAG,CACZ;AAAEC,EAAAA,EAAE,EAAE,CAAN;AAASC,EAAAA,MAAM,EAAE;AAAjB,CADY,EAEZ;AAAED,EAAAA,EAAE,EAAE,CAAN;AAASC,EAAAA,MAAM,EAAE;AAAjB,CAFY,EAGZ;AAAED,EAAAA,EAAE,EAAE,CAAN;AAASC,EAAAA,MAAM,EAAE;AAAjB,CAHY,CAAd;;AAMA,MAAMC,UAAU,GAAG,MAAOC,KAAP,IAAiB;AAClC,QAAMC,QAAQ,GAAGD,KAAK,CAACE,GAAN,CAAUC,IAAI,IAAIT,KAAK,CAACS,IAAD,CAAvB,CAAjB;AAEA,QAAMC,SAAS,GAAG,MAAMC,OAAO,CAACC,GAAR,CACtBL,QAAQ,CAACC,GAAT,CAAa,MAAMK,OAAN,IAAiB,MAAMA,OAAO,CAACC,IAAR,EAApC,CADsB,CAAxB;AAIAC,EAAAA,OAAO,CAACC,GAAR,CAAYN,SAAZ;AAEA,SAAOA,SAAP;AACD,CAVD;;AAYA,gBAAe,OAAOO,GAAP,EAAYC,GAAZ,KAAoB;AACjC,QAAMC,IAAI,GAAGjB,KAAK,CAACkB,IAAN,CAAWD,IAAI,IAAIA,IAAI,CAACf,MAAL,KAAgBa,GAAG,CAACI,KAAJ,CAAUF,IAA7C,CAAb;;AAEA,MAAI,CAACA,IAAL,EAAW;AACT,WAAOD,GAAG,CAACI,MAAJ,CAAW,GAAX,EAAgBR,IAAhB,CAAqB;AAAES,MAAAA,OAAO,EAAE;AAAX,KAArB,CAAP;AACD;;AAED,MAAI;AACF,UAAMC,QAAQ,GAAG,MAAMxB,KAAK,CAAE,gCAA+BmB,IAAI,CAAChB,EAAG,EAAzC,CAA5B;AACA,UAAMsB,IAAI,GAAG,MAAMD,QAAQ,CAACV,IAAT,EAAnB;AAEAW,IAAAA,IAAI,CAACnB,KAAL,GAAa,MAAMD,UAAU,CAACoB,IAAI,CAACnB,KAAN,CAA7B;AAEAS,IAAAA,OAAO,CAACC,GAAR,CAAYS,IAAZ;AAEA,WAAOP,GAAG,CAACI,MAAJ,CAAW,GAAX,EAAgBR,IAAhB,CAAqBb,UAAU,CAACwB,IAAD,CAA/B,CAAP;AACD,GATD,CASE,OAAOC,GAAP,EAAY;AACZX,IAAAA,OAAO,CAACC,GAAR,CAAY,uBAAZ,EAAqCU,GAArC;AACA,WAAOR,GAAG,CAACI,MAAJ,CAAW,GAAX,EAAgBR,IAAhB,CAAqB;AAAES,MAAAA,OAAO,EAAE,wBAAX;AAAqCG,MAAAA;AAArC,KAArB,CAAP;AACD;AACF,CApBD","sourcesContent":["import fetch from 'isomorphic-unfetch';\n\nimport { formatStub } from '../../../lib/responseFormat';\n\nconst stubs = [\n  { id: 1, planet: 'tatooine' },\n  { id: 2, planet: 'alderaan' },\n  { id: 3, planet: 'yavin' }\n];\n\nconst fetchFilms = async (films) => {\n  const promises = films.map(film => fetch(film));\n\n  const responses = await Promise.all(\n    promises.map(async promise => await promise.json())\n  );\n\n  console.log(responses)\n\n  return responses;\n};\n\nexport default async (req, res) => {\n  const stub = stubs.find(stub => stub.planet === req.query.stub);\n\n  if (!stub) {\n    return res.status(404).json({ message: 'Invalid planet' });\n  }\n\n  try {\n    const response = await fetch(`https://swapi.co/api/planets/${stub.id}`);\n    const data = await response.json();\n\n    data.films = await fetchFilms(data.films);\n\n    console.log(data);\n\n    return res.status(200).json(formatStub(data));\n  } catch (err) {\n    console.log('Error: /planets/:stub', err);\n    return res.status(400).json({ message: 'Error fetching planets', err });\n  }\n};\n"]},"metadata":{},"sourceType":"module"}