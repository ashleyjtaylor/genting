{"ast":null,"code":"import _Promise from \"@babel/runtime-corejs2/core-js/promise\";\nimport _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _Object$entries from \"@babel/runtime-corejs2/core-js/object/entries\";\nvar __jsx = React.createElement;\nimport React from 'react';\nimport fetch from 'isomorphic-unfetch';\n\nvar Planet = function Planet(_ref) {\n  var data = _ref.data;\n  var Name = data.Name,\n      Climate = data.Climate,\n      Population = data.Population,\n      Films = data.Films;\n  return __jsx(\"div\", null, __jsx(\"h1\", null, Name), __jsx(\"div\", null, __jsx(\"h4\", null, \"Climate\"), __jsx(\"p\", null, Climate)), __jsx(\"div\", null, __jsx(\"h4\", null, \"Population\"), __jsx(\"p\", null, Population)), __jsx(\"div\", null, __jsx(\"h4\", null, \"Films\"), Films.map(function (film) {\n    return __jsx(\"p\", null, film.Name);\n  })));\n};\n\nPlanet.getInitialProps = function _callee(_ref2) {\n  var res, query, response, data;\n  return _regeneratorRuntime.async(function _callee$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          res = _ref2.res, query = _ref2.query;\n          _context.prev = 1;\n          _context.next = 4;\n          return _regeneratorRuntime.awrap(fetch(\"http://localhost:3000/api/planets/\".concat(query.stub)));\n\n        case 4:\n          response = _context.sent;\n          _context.next = 7;\n          return _regeneratorRuntime.awrap(response.json());\n\n        case 7:\n          data = _context.sent;\n\n          if (!(_Object$entries(data).length === 0)) {\n            _context.next = 11;\n            break;\n          }\n\n          res.statusCode = 404;\n          return _context.abrupt(\"return\", {\n            data: null,\n            statusCode: 404\n          });\n\n        case 11:\n          res.statusCode = 200;\n          return _context.abrupt(\"return\", {\n            data: data\n          });\n\n        case 15:\n          _context.prev = 15;\n          _context.t0 = _context[\"catch\"](1);\n          res.statusCode = 500;\n          return _context.abrupt(\"return\", {\n            err: _context.t0,\n            statusCode: 500,\n            message: 'Server error'\n          });\n\n        case 19:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, [[1, 15]], _Promise);\n};\n\nexport default Planet;","map":{"version":3,"sources":["/Users/ashleytaylor/Documents/genting/pages/planets/[stub].jsx"],"names":["React","fetch","Planet","data","Name","Climate","Population","Films","map","film","getInitialProps","res","query","stub","response","json","length","statusCode","err","message"],"mappings":";;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,KAAP,MAAkB,oBAAlB;;AAEA,IAAMC,MAAM,GAAG,SAATA,MAAS,OAAc;AAAA,MAAXC,IAAW,QAAXA,IAAW;AAAA,MACnBC,IADmB,GACkBD,IADlB,CACnBC,IADmB;AAAA,MACbC,OADa,GACkBF,IADlB,CACbE,OADa;AAAA,MACJC,UADI,GACkBH,IADlB,CACJG,UADI;AAAA,MACQC,KADR,GACkBJ,IADlB,CACQI,KADR;AAG3B,SACE,mBACE,kBAAKH,IAAL,CADF,EAEE,mBACE,4BADF,EAEE,iBAAIC,OAAJ,CAFF,CAFF,EAME,mBACE,+BADF,EAEE,iBAAIC,UAAJ,CAFF,CANF,EAUE,mBACE,0BADF,EAEGC,KAAK,CAACC,GAAN,CAAU,UAAAC,IAAI;AAAA,WAAK,iBAAIA,IAAI,CAACL,IAAT,CAAL;AAAA,GAAd,CAFH,CAVF,CADF;AAiBD,CApBD;;AAsBAF,MAAM,CAACQ,eAAP,GAAyB;AAAA;AAAA;AAAA;AAAA;AAAA;AAASC,UAAAA,GAAT,SAASA,GAAT,EAAcC,KAAd,SAAcA,KAAd;AAAA;AAAA;AAAA,2CAEEX,KAAK,6CAAsCW,KAAK,CAACC,IAA5C,EAFP;;AAAA;AAEfC,UAAAA,QAFe;AAAA;AAAA,2CAGFA,QAAQ,CAACC,IAAT,EAHE;;AAAA;AAGfZ,UAAAA,IAHe;;AAAA,gBAKjB,gBAAeA,IAAf,EAAqBa,MAArB,KAAgC,CALf;AAAA;AAAA;AAAA;;AAMnBL,UAAAA,GAAG,CAACM,UAAJ,GAAiB,GAAjB;AANmB,2CAOZ;AAAEd,YAAAA,IAAI,EAAE,IAAR;AAAcc,YAAAA,UAAU,EAAE;AAA1B,WAPY;;AAAA;AAUrBN,UAAAA,GAAG,CAACM,UAAJ,GAAiB,GAAjB;AAVqB,2CAWd;AAAEd,YAAAA,IAAI,EAAJA;AAAF,WAXc;;AAAA;AAAA;AAAA;AAarBQ,UAAAA,GAAG,CAACM,UAAJ,GAAiB,GAAjB;AAbqB,2CAcd;AACLC,YAAAA,GAAG,aADE;AAELD,YAAAA,UAAU,EAAE,GAFP;AAGLE,YAAAA,OAAO,EAAE;AAHJ,WAdc;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAzB;;AAsBA,eAAejB,MAAf","sourcesContent":["import React from 'react';\nimport fetch from 'isomorphic-unfetch';\n\nconst Planet = ({ data }) => {\n  const { Name, Climate, Population, Films } = data;\n\n  return (\n    <div>\n      <h1>{Name}</h1>\n      <div>\n        <h4>Climate</h4>\n        <p>{Climate}</p>\n      </div>\n      <div>\n        <h4>Population</h4>\n        <p>{Population}</p>\n      </div>\n      <div>\n        <h4>Films</h4>\n        {Films.map(film => (<p>{film.Name}</p>))}\n      </div>\n    </div>\n  );\n}\n\nPlanet.getInitialProps = async ({ res, query }) => {\n  try {\n    const response = await fetch(`http://localhost:3000/api/planets/${query.stub}`);\n    const data = await response.json();\n\n    if (Object.entries(data).length === 0) {\n      res.statusCode = 404;\n      return { data: null, statusCode: 404 };\n    }\n\n    res.statusCode = 200;\n    return { data };\n  } catch (err) {\n    res.statusCode = 500;\n    return {\n      err,\n      statusCode: 500,\n      message: 'Server error'\n    }\n  }\n};\n\nexport default Planet;\n"]},"metadata":{},"sourceType":"module"}