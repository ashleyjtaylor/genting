{"ast":null,"code":"import fetch from 'isomorphic-unfetch';\nimport { formatStub, formatFilm } from '../../../lib/responseFormat';\nconst stubs = [{\n  id: 1,\n  planet: 'tatooine'\n}, {\n  id: 2,\n  planet: 'alderaan'\n}, {\n  id: 3,\n  planet: 'yavin'\n}];\n\nconst fetchFilms = async films => {\n  const data = await Promise.all(films.map(async url => {\n    const response = await fetch(url);\n    const data = await response.json();\n    return formatFilm(data);\n  }));\n  return data;\n};\n\nexport default (async (req, res) => {\n  const stub = stubs.find(stub => stub.planet === req.query.stub);\n\n  if (!stub) {\n    return res.status(404).json({\n      message: 'Invalid planet'\n    });\n  }\n\n  try {\n    const response = await fetch(`https://swapi.co/api/planets/${stub.id}`);\n    const data = await response.json();\n    data.films = await fetchFilms(data.films);\n    return res.status(200).json(formatStub(data));\n  } catch (err) {\n    console.log('Error: /planets/:stub', err);\n    return res.status(400).json({\n      message: 'Error fetching planets',\n      err\n    });\n  }\n});","map":{"version":3,"sources":["/Users/ashleytaylor/Documents/genting/pages/api/planets/[stub].js"],"names":["fetch","formatStub","formatFilm","stubs","id","planet","fetchFilms","films","data","Promise","all","map","url","response","json","req","res","stub","find","query","status","message","err","console","log"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,oBAAlB;AAEA,SAASC,UAAT,EAAqBC,UAArB,QAAuC,6BAAvC;AAEA,MAAMC,KAAK,GAAG,CACZ;AAAEC,EAAAA,EAAE,EAAE,CAAN;AAASC,EAAAA,MAAM,EAAE;AAAjB,CADY,EAEZ;AAAED,EAAAA,EAAE,EAAE,CAAN;AAASC,EAAAA,MAAM,EAAE;AAAjB,CAFY,EAGZ;AAAED,EAAAA,EAAE,EAAE,CAAN;AAASC,EAAAA,MAAM,EAAE;AAAjB,CAHY,CAAd;;AAMA,MAAMC,UAAU,GAAG,MAAOC,KAAP,IAAiB;AAClC,QAAMC,IAAI,GAAG,MAAMC,OAAO,CAACC,GAAR,CACjBH,KAAK,CAACI,GAAN,CAAU,MAAMC,GAAN,IAAa;AACrB,UAAMC,QAAQ,GAAG,MAAMb,KAAK,CAACY,GAAD,CAA5B;AACA,UAAMJ,IAAI,GAAG,MAAMK,QAAQ,CAACC,IAAT,EAAnB;AAEA,WAAOZ,UAAU,CAACM,IAAD,CAAjB;AACD,GALD,CADiB,CAAnB;AASA,SAAOA,IAAP;AACD,CAXD;;AAaA,gBAAe,OAAOO,GAAP,EAAYC,GAAZ,KAAoB;AACjC,QAAMC,IAAI,GAAGd,KAAK,CAACe,IAAN,CAAWD,IAAI,IAAIA,IAAI,CAACZ,MAAL,KAAgBU,GAAG,CAACI,KAAJ,CAAUF,IAA7C,CAAb;;AAEA,MAAI,CAACA,IAAL,EAAW;AACT,WAAOD,GAAG,CAACI,MAAJ,CAAW,GAAX,EAAgBN,IAAhB,CAAqB;AAAEO,MAAAA,OAAO,EAAE;AAAX,KAArB,CAAP;AACD;;AAED,MAAI;AACF,UAAMR,QAAQ,GAAG,MAAMb,KAAK,CAAE,gCAA+BiB,IAAI,CAACb,EAAG,EAAzC,CAA5B;AACA,UAAMI,IAAI,GAAG,MAAMK,QAAQ,CAACC,IAAT,EAAnB;AAEAN,IAAAA,IAAI,CAACD,KAAL,GAAa,MAAMD,UAAU,CAACE,IAAI,CAACD,KAAN,CAA7B;AAEA,WAAOS,GAAG,CAACI,MAAJ,CAAW,GAAX,EAAgBN,IAAhB,CAAqBb,UAAU,CAACO,IAAD,CAA/B,CAAP;AACD,GAPD,CAOE,OAAOc,GAAP,EAAY;AACZC,IAAAA,OAAO,CAACC,GAAR,CAAY,uBAAZ,EAAqCF,GAArC;AACA,WAAON,GAAG,CAACI,MAAJ,CAAW,GAAX,EAAgBN,IAAhB,CAAqB;AAAEO,MAAAA,OAAO,EAAE,wBAAX;AAAqCC,MAAAA;AAArC,KAArB,CAAP;AACD;AACF,CAlBD","sourcesContent":["import fetch from 'isomorphic-unfetch';\n\nimport { formatStub, formatFilm } from '../../../lib/responseFormat';\n\nconst stubs = [\n  { id: 1, planet: 'tatooine' },\n  { id: 2, planet: 'alderaan' },\n  { id: 3, planet: 'yavin' }\n];\n\nconst fetchFilms = async (films) => {\n  const data = await Promise.all(\n    films.map(async url => {\n      const response = await fetch(url);\n      const data = await response.json();\n\n      return formatFilm(data);\n    })\n  );\n\n  return data;\n};\n\nexport default async (req, res) => {\n  const stub = stubs.find(stub => stub.planet === req.query.stub);\n\n  if (!stub) {\n    return res.status(404).json({ message: 'Invalid planet' });\n  }\n\n  try {\n    const response = await fetch(`https://swapi.co/api/planets/${stub.id}`);\n    const data = await response.json();\n\n    data.films = await fetchFilms(data.films);\n\n    return res.status(200).json(formatStub(data));\n  } catch (err) {\n    console.log('Error: /planets/:stub', err);\n    return res.status(400).json({ message: 'Error fetching planets', err });\n  }\n};\n"]},"metadata":{},"sourceType":"module"}