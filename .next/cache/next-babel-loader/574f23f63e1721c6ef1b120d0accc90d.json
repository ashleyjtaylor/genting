{"ast":null,"code":"var __jsx = React.createElement;\nimport React from 'react';\nimport fetch from 'isomorphic-unfetch';\nimport Planet from '../../components/Planet/Planet';\n\nconst PlanetPage = ({\n  data\n}) => {\n  return __jsx(Planet, data);\n};\n\nPlanetPage.getInitialProps = async ({\n  res,\n  query\n}) => {\n  try {\n    const response = await fetch(`http://localhost:3000/api/planets/${query.stub}`);\n    const data = await response.json();\n\n    if (Object.entries(data).length === 0) {\n      res.statusCode = 404;\n      return {\n        statusCode: 404\n      };\n    }\n\n    res.statusCode = 200;\n    return {\n      data\n    };\n  } catch (err) {\n    res.statusCode = 500;\n    return {\n      err,\n      statusCode: 500,\n      message: 'Server error'\n    };\n  }\n};\n\nexport default PlanetPage;","map":{"version":3,"sources":["/Users/ashleytaylor/Documents/genting/pages/planets/[stub].jsx"],"names":["React","fetch","Planet","PlanetPage","data","getInitialProps","res","query","response","stub","json","Object","entries","length","statusCode","err","message"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,KAAP,MAAkB,oBAAlB;AAEA,OAAOC,MAAP,MAAmB,gCAAnB;;AAEA,MAAMC,UAAU,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAc;AAC/B,SACE,MAAC,MAAD,EAAYA,IAAZ,CADF;AAGD,CAJD;;AAMAD,UAAU,CAACE,eAAX,GAA6B,OAAO;AAAEC,EAAAA,GAAF;AAAOC,EAAAA;AAAP,CAAP,KAA0B;AACrD,MAAI;AACF,UAAMC,QAAQ,GAAG,MAAMP,KAAK,CAAE,qCAAoCM,KAAK,CAACE,IAAK,EAAjD,CAA5B;AACA,UAAML,IAAI,GAAG,MAAMI,QAAQ,CAACE,IAAT,EAAnB;;AAEA,QAAIC,MAAM,CAACC,OAAP,CAAeR,IAAf,EAAqBS,MAArB,KAAgC,CAApC,EAAuC;AACrCP,MAAAA,GAAG,CAACQ,UAAJ,GAAiB,GAAjB;AACA,aAAO;AAAEA,QAAAA,UAAU,EAAE;AAAd,OAAP;AACD;;AAEDR,IAAAA,GAAG,CAACQ,UAAJ,GAAiB,GAAjB;AAEA,WAAO;AAAEV,MAAAA;AAAF,KAAP;AACD,GAZD,CAYE,OAAOW,GAAP,EAAY;AACZT,IAAAA,GAAG,CAACQ,UAAJ,GAAiB,GAAjB;AAEA,WAAO;AACLC,MAAAA,GADK;AAELD,MAAAA,UAAU,EAAE,GAFP;AAGLE,MAAAA,OAAO,EAAE;AAHJ,KAAP;AAKD;AACF,CAtBD;;AAwBA,eAAeb,UAAf","sourcesContent":["import React from 'react';\nimport fetch from 'isomorphic-unfetch';\n\nimport Planet from '../../components/Planet/Planet'\n\nconst PlanetPage = ({ data }) => {\n  return (\n    <Planet {...data } />\n  );\n}\n\nPlanetPage.getInitialProps = async ({ res, query }) => {\n  try {\n    const response = await fetch(`http://localhost:3000/api/planets/${query.stub}`);\n    const data = await response.json();\n\n    if (Object.entries(data).length === 0) {\n      res.statusCode = 404;\n      return { statusCode: 404 };\n    }\n\n    res.statusCode = 200;\n\n    return { data };\n  } catch (err) {\n    res.statusCode = 500;\n\n    return {\n      err,\n      statusCode: 500,\n      message: 'Server error'\n    }\n  }\n};\n\nexport default PlanetPage;\n"]},"metadata":{},"sourceType":"module"}