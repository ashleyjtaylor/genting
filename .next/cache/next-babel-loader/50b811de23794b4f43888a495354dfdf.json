{"ast":null,"code":"import fetch from 'isomorphic-unfetch';\nimport { formatStub } from '../../../lib/responseFormat';\nconst stubs = [{\n  id: 1,\n  planet: 'tatooine'\n}, {\n  id: 2,\n  planet: 'alderaan'\n}, {\n  id: 3,\n  planet: 'yavin'\n}];\n\nconst fetchFilms = async films => {\n  const promises = films.map(film => fetch(film));\n  const responses = await Promise.all(promises);\n  const data = await responses.map(async res => await res.json());\n  return data;\n};\n\nexport default (async (req, res) => {\n  const stub = stubs.find(stub => stub.planet === req.query.stub);\n\n  if (!stub) {\n    return res.status(404).json({\n      message: 'Invalid planet'\n    });\n  }\n\n  try {\n    const response = await fetch(`https://swapi.co/api/planets/${stub.id}`);\n    const data = await response.json();\n    data.films = await fetchFilms(data.films);\n    console.log(data);\n    return res.status(200).json(formatStub(data));\n  } catch (err) {\n    console.log('Error: /planets/:stub', err);\n    return res.status(400).json({\n      message: 'Error fetching planets',\n      err\n    });\n  }\n});","map":{"version":3,"sources":["/Users/ashleytaylor/Documents/genting/pages/api/planets/[stub].js"],"names":["fetch","formatStub","stubs","id","planet","fetchFilms","films","promises","map","film","responses","Promise","all","data","res","json","req","stub","find","query","status","message","response","console","log","err"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,oBAAlB;AAEA,SAASC,UAAT,QAA2B,6BAA3B;AAEA,MAAMC,KAAK,GAAG,CACZ;AAAEC,EAAAA,EAAE,EAAE,CAAN;AAASC,EAAAA,MAAM,EAAE;AAAjB,CADY,EAEZ;AAAED,EAAAA,EAAE,EAAE,CAAN;AAASC,EAAAA,MAAM,EAAE;AAAjB,CAFY,EAGZ;AAAED,EAAAA,EAAE,EAAE,CAAN;AAASC,EAAAA,MAAM,EAAE;AAAjB,CAHY,CAAd;;AAMA,MAAMC,UAAU,GAAG,MAAOC,KAAP,IAAiB;AAClC,QAAMC,QAAQ,GAAGD,KAAK,CAACE,GAAN,CAAUC,IAAI,IAAIT,KAAK,CAACS,IAAD,CAAvB,CAAjB;AAEA,QAAMC,SAAS,GAAG,MAAMC,OAAO,CAACC,GAAR,CAAYL,QAAZ,CAAxB;AACA,QAAMM,IAAI,GAAG,MAAMH,SAAS,CAACF,GAAV,CAAc,MAAMM,GAAN,IAAa,MAAMA,GAAG,CAACC,IAAJ,EAAjC,CAAnB;AAEA,SAAOF,IAAP;AACD,CAPD;;AASA,gBAAe,OAAOG,GAAP,EAAYF,GAAZ,KAAoB;AACjC,QAAMG,IAAI,GAAGf,KAAK,CAACgB,IAAN,CAAWD,IAAI,IAAIA,IAAI,CAACb,MAAL,KAAgBY,GAAG,CAACG,KAAJ,CAAUF,IAA7C,CAAb;;AAEA,MAAI,CAACA,IAAL,EAAW;AACT,WAAOH,GAAG,CAACM,MAAJ,CAAW,GAAX,EAAgBL,IAAhB,CAAqB;AAAEM,MAAAA,OAAO,EAAE;AAAX,KAArB,CAAP;AACD;;AAED,MAAI;AACF,UAAMC,QAAQ,GAAG,MAAMtB,KAAK,CAAE,gCAA+BiB,IAAI,CAACd,EAAG,EAAzC,CAA5B;AACA,UAAMU,IAAI,GAAG,MAAMS,QAAQ,CAACP,IAAT,EAAnB;AAEAF,IAAAA,IAAI,CAACP,KAAL,GAAa,MAAMD,UAAU,CAACQ,IAAI,CAACP,KAAN,CAA7B;AAEAiB,IAAAA,OAAO,CAACC,GAAR,CAAYX,IAAZ;AAEA,WAAOC,GAAG,CAACM,MAAJ,CAAW,GAAX,EAAgBL,IAAhB,CAAqBd,UAAU,CAACY,IAAD,CAA/B,CAAP;AACD,GATD,CASE,OAAOY,GAAP,EAAY;AACZF,IAAAA,OAAO,CAACC,GAAR,CAAY,uBAAZ,EAAqCC,GAArC;AACA,WAAOX,GAAG,CAACM,MAAJ,CAAW,GAAX,EAAgBL,IAAhB,CAAqB;AAAEM,MAAAA,OAAO,EAAE,wBAAX;AAAqCI,MAAAA;AAArC,KAArB,CAAP;AACD;AACF,CApBD","sourcesContent":["import fetch from 'isomorphic-unfetch';\n\nimport { formatStub } from '../../../lib/responseFormat';\n\nconst stubs = [\n  { id: 1, planet: 'tatooine' },\n  { id: 2, planet: 'alderaan' },\n  { id: 3, planet: 'yavin' }\n];\n\nconst fetchFilms = async (films) => {\n  const promises = films.map(film => fetch(film));\n\n  const responses = await Promise.all(promises);\n  const data = await responses.map(async res => await res.json());\n\n  return data;\n};\n\nexport default async (req, res) => {\n  const stub = stubs.find(stub => stub.planet === req.query.stub);\n\n  if (!stub) {\n    return res.status(404).json({ message: 'Invalid planet' });\n  }\n\n  try {\n    const response = await fetch(`https://swapi.co/api/planets/${stub.id}`);\n    const data = await response.json();\n\n    data.films = await fetchFilms(data.films);\n\n    console.log(data);\n\n    return res.status(200).json(formatStub(data));\n  } catch (err) {\n    console.log('Error: /planets/:stub', err);\n    return res.status(400).json({ message: 'Error fetching planets', err });\n  }\n};\n"]},"metadata":{},"sourceType":"module"}